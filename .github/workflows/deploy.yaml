name: Test, Build and Deploy to Cloud Run

on:
  push:
    branches:
      - main

env:
  PROJECT_ID: ingka-find-racho8-dev
  REGION: europe-west3
  SERVICE_NAME: ravi-mcp-server
  REPO_NAME: ravi-mcp-server-repo
  MICROSERVICE_URL: https://product-service-256110662801.europe-west3.run.app

jobs:
  test:
    runs-on: ubuntu-latest
    name: Run Tests
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v3

      - name: Set up Go
        uses: actions/setup-go@v4
        with:
          go-version: '1.23.4'

      - name: Install dependencies
        run: go mod download

      - name: Run Go unit tests
        run: go test -v ./...

      - name: Install test tools
        run: |
          sudo apt-get update
          sudo apt-get install -y curl jq

      - name: Start MCP server for testing
        run: |
          export MICROSERVICE_URL="${{ env.MICROSERVICE_URL }}"
          go run main.go &
          SERVER_PID=$!
          echo "SERVER_PID=$SERVER_PID" >> $GITHUB_ENV
          
          # Wait for server to start
          echo "Waiting for server to start..."
          for i in {1..30}; do
            if curl -s http://localhost:8080/health > /dev/null 2>&1; then
              echo "Server is ready!"
              break
            fi
            echo "Waiting... ($i/30)"
            sleep 2
          done
          
          # Verify server is responding
          curl -f http://localhost:8080/health || (echo "Health check failed" && exit 1)

      - name: Run MCP protocol validation
        run: |
          cd tests
          chmod +x validate_mcp.sh
          echo "üîç Running MCP Protocol Validation..."
          ./validate_mcp.sh || (echo "‚ùå MCP Protocol validation failed" && exit 1)

      - name: Run comprehensive tests
        run: |
          cd tests
          chmod +x run_tests.sh
          echo "üß™ Running Comprehensive Test Suite..."
          ./run_tests.sh || (echo "‚ùå Comprehensive tests failed" && exit 1)

      - name: Test Summary
        if: always()
        run: |
          echo "‚úÖ All tests completed!"
          echo "üöÄ Ready for deployment"

      - name: Stop server
        if: always()
        run: |
          if [ ! -z "$SERVER_PID" ]; then
            kill $SERVER_PID || true
          fi
          pkill -f "go run main.go" || true

  build-and-deploy:
    runs-on: ubuntu-latest
    needs: test
    name: Build and Deploy
    if: github.ref == 'refs/heads/main'

    steps:
      - name: Checkout code
        uses: actions/checkout@v3

      - name: Authenticate to Google Cloud
        uses: google-github-actions/auth@v1
        with:
          credentials_json: '${{ secrets.GCP_SA_KEY }}'

      - name: Set up Cloud SDK
        uses: google-github-actions/setup-gcloud@v1
        with:
          project_id: ${{ env.PROJECT_ID }}

      - name: Configure Docker for Artifact Registry
        run: gcloud auth configure-docker ${{ env.REGION }}-docker.pkg.dev

      - name: Build Docker image
        run: |
          docker build -t ${{ env.REGION }}-docker.pkg.dev/${{ env.PROJECT_ID }}/${{ env.REPO_NAME }}/${{ env.SERVICE_NAME }}:latest .

      - name: Push Docker image to Artifact Registry
        run: |
          docker push ${{ env.REGION }}-docker.pkg.dev/${{ env.PROJECT_ID }}/${{ env.REPO_NAME }}/${{ env.SERVICE_NAME }}:latest

      - name: Deploy to Cloud Run
        run: |
          gcloud run deploy ${{ env.SERVICE_NAME }} \
            --image ${{ env.REGION }}-docker.pkg.dev/${{ env.PROJECT_ID }}/${{ env.REPO_NAME }}/${{ env.SERVICE_NAME }}:latest \
            --platform managed \
            --region ${{ env.REGION }} \
            --no-allow-unauthenticated \
            --set-env-vars "GOOGLE_CLOUD_PROJECT=${{ env.PROJECT_ID }},MICROSERVICE_URL=${{ env.MICROSERVICE_URL }}"